version: '3.8'

services:
  document-scheduler-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    image: document-scheduler:gpu
    container_name: document-scheduler-gpu
    restart: unless-stopped
    ports:
      - "8000:8000"  # API端口
    volumes:
      - ./test:/app/test:ro  # 输入文件目录（只读）
      - ./output:/app/output  # 输出文件目录
      - ./logs:/app/logs      # 日志目录
      - ./temp:/app/temp      # 临时文件目录
      - ./docs:/app/docs:ro   # 文档目录（只读）
      - ./models:/app/models  # 模型缓存目录
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_TASKS=5  # GPU版本支持更多并发
      - TASK_CHECK_INTERVAL=3   # GPU版本检查间隔更短
      - DEVICE_MODE=gpu
      - CUDA_VISIBLE_DEVICES=0
      - GPU_MEMORY_LIMIT=8192
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    working_dir: /app
    command: >
      bash -c "
        echo '文档转换调度系统 GPU版本 启动中...' &&
        echo '配置信息:' &&
        echo '  版本: GPU加速版' &&
        echo '  API端口: 8000' &&
        echo '  输入目录: /app/test' &&
        echo '  输出目录: /app/output' &&
        echo '  最大并发任务数: 5' &&
        echo '  GPU设备: CUDA_VISIBLE_DEVICES=0' &&
        nvidia-smi || echo '警告: 无法检测到GPU设备' &&
        mkdir -p /app/output /app/logs /app/temp /app/models &&
        echo '启动API服务器...' &&
        python start.py
      "
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s  # GPU版本启动时间更长
    networks:
      - document-scheduler-network

  # 可选：Redis缓存服务（GPU版本推荐使用）
  redis-gpu:
    image: redis:7-alpine
    container_name: document-scheduler-redis-gpu
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_gpu_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - document-scheduler-network
    profiles:
      - with-redis

  # 可选：PostgreSQL数据库
  postgres-gpu:
    image: postgres:15-alpine
    container_name: document-scheduler-postgres-gpu
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=document_scheduler
      - POSTGRES_USER=scheduler
      - POSTGRES_PASSWORD=scheduler123
    volumes:
      - postgres_gpu_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - document-scheduler-network
    profiles:
      - with-database

  # GPU监控服务
  gpu-monitor:
    image: nvidia/dcgm-exporter:3.1.8-3.1.5-ubuntu20.04
    container_name: gpu-monitor
    restart: unless-stopped
    ports:
      - "9400:9400"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - document-scheduler-network
    profiles:
      - with-monitoring

volumes:
  redis_gpu_data:
    driver: local
  postgres_gpu_data:
    driver: local

networks:
  document-scheduler-network:
    driver: bridge
    name: document-scheduler-gpu-network
